using System;
using System.Linq;

using NUnit.Framework;

namespace HermaFx.RuntimeExtensions
{
	public class StringExtensionsTests
	{
		[Test]
		public void Check_AsByteArray_Method_Throws_An_Exception_If_Argument_Is_Null()
		{
			Assert.That(() => ((string)null).AsByteArray(), Throws.Exception.TypeOf<ArgumentNullException>(), "Missing guards against null argument?!");
		}

		[Test]
		public void Check_AsByteArray_Method_Returns_An_Empty_Array_If_Argument_Is_Empty()
		{
			var bytes = string.Empty.AsByteArray();
			Assert.That(bytes, Is.Not.Null.And.Empty, "Unexpected result?! (must be not null and empty the returned array).");
		}

		[Test]
		public void Check_AsByteArray_Method_Throws_An_Exception_If_Argument_Length_Is_Odd()
		{
			var hexStr = "123"; //< Invalid.. but ensure we throw when hexadecimal string length is odd.
			Assert.That(() => hexStr.AsByteArray(), Throws.Exception.TypeOf<ArgumentOutOfRangeException>(), "Missing guards against odd hex string?!");
		}

		[Test]
		public void Check_AsByteArray_Method_Is_Working_Properly(
			[Values(
				new[] { byte.MaxValue },
				new[] { byte.MinValue, byte.MaxValue },
				new[] { byte.MaxValue, byte.MinValue, byte.MaxValue },
				new[] { byte.MinValue, byte.MaxValue, byte.MinValue, byte.MaxValue },
				new[] { byte.MaxValue, byte.MinValue, byte.MaxValue, byte.MinValue, byte.MaxValue }
			)] byte[] bytes)
		{
			var strHex = bytes.ToHexString();
			var regenerated = strHex.AsByteArray();

			Assert.That(regenerated.ToHexString(), Is.EqualTo(strHex), "Do we have different hex strings?!");
		}

		[TestCase("010203", new byte[] { 0x1, 0x2, 0x3 })]
		[TestCase("ffffff", new byte[] { 0xff, 0xff, 0xff })]
		[TestCase("FFFFFF", new byte[] { 0xFF, 0xFF, 0xFF })]
		public void Check_AsByteArray_Method_Returns_The_Expected_Byte_Array_For_Hardcoded_Hexadecimal_Strings(string strHex, byte[] bytes)
		{
			var result = strHex.AsByteArray();
			Assert.That(result.SequenceEqual(bytes), Is.True, "The generated byte[] from hardcoded hex string '{0}' is not equals to the expected one?!", strHex);
		}
	}
}